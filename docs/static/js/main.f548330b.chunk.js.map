{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGif.js","components/GifGridItem.js","components/GifGrid.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGif","loading","state","setState","useEffect","then","imgs","GifGridItem","console","log","className","src","alt","GifGrid","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAmCeA,EAhCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAElB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVS,SAACC,GAChBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IACxBR,GAAc,SAAAS,GAAI,OAAGP,GAAH,mBAAiBO,OACnCN,EAAc,MAMlB,SACI,uBACAO,KAAK,OACLC,MAAOT,EACPU,SAlBgB,SAACP,GACrBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACiCC,UAAUH,GAD3C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAKEA,EAAKC,OALP,uBAKZC,EALY,EAKZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACvB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAgBZM,GAhBY,4CAAH,sDC0BLO,EAvBK,SAAEf,GAClB,MAA0Bd,mBAAS,CAC/BqB,KAAK,GACLS,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAXAC,qBAAW,WACPpB,EAAQC,GAAUoB,MAAM,SAAAC,GACpBH,EAAS,CACLX,KAAMc,EACNL,SAAS,SAGnB,CAAChB,IAIIiB,GCXIK,EAVK,SAAC,GAAkB,IAAhBV,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAEzB,OADAqB,QAAQC,IAAIZ,EAAQV,GAEhB,sBAAKuB,UAAU,OAAf,UACI,qBAAKC,IAAKxB,EAAKyB,IAAKf,IACpB,4BAAIA,QC0BDgB,EA5BC,SAAC,GAAgB,IAAf5B,EAAc,EAAdA,SAMd,EAAiCe,EAAYf,GAAhCa,EAAb,EAAQN,KAAaS,EAArB,EAAqBA,QAErB,OACI,qCACA,6BAAKhB,IACHgB,GAAW,2CAEb,qBAAKS,UAAU,YAAf,SAEQZ,EAAOJ,KAAI,SAAAC,GACP,OAAO,cAAC,EAAD,eAESA,GADEA,EAAIC,aCS3BkB,EA1BM,WAEjB,MAAoC3C,mBAAS,CAAC,QAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAEA,OACI,qCACI,iDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQ6C,EAAWrB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,YCbjC+B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f548330b.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    const handleInputChange=(e)=>{\r\n        setinputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        if(inputValue.trim().length>2){\r\n            setCategories(cats=>[inputValue,...cats]);\r\n            setinputValue('');\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n            type='text' \r\n            value={inputValue}\r\n            onChange={handleInputChange}\r\n            /> \r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes ={\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","export const getGifs = async( category ) => {\r\n    const url=`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=wvqg9hPF7J3bFMSuaY1N0R20eEeywM0i`;\r\n    const resp = await fetch(url);\r\n    //solo me interesa la data dentro \r\n    //de la 'data' asi que uso destructuracion\r\n    const {data} = await resp.json();\r\n    //extraigo solo la informacion que necesito, no todo\r\n    const gifs = data.map(img=>{\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n    /*console.log(gifs);\r\n    setImages(gifs);*/\r\n}","import {useState, useEffect} from 'react';\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\nconst useFetchGif = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n\r\n    //dispara lo que esta dentro una sola vez cuando\r\n    //se carga la pagina la primera vez\r\n    //solo recargara cuando category cambien, lo cual en este caso no va a pasar\r\n    useEffect( () => {\r\n        getGifs(category).then( imgs=>{\r\n            setState({\r\n                data: imgs ,\r\n                loading: false\r\n            })\r\n        } )\r\n    },[category])\r\n    \r\n    \r\n    \r\n    return state;\r\n}\r\n\r\nexport default useFetchGif\r\n","import React from 'react'\r\n\r\nconst GifGridItem = ( {title,url}) => {\r\n    console.log(title , url);\r\n    return (\r\n        <div className='card'>\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>         \r\n        </div>\r\n    )\r\n} \r\n\r\nexport default GifGridItem\r\n","import React from 'react'\r\nimport useFetchGif from '../hooks/useFetchGif';\r\n//import { getGifs } from '../helpers/getGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({category}) => {\r\n\r\n    //const [images, setImages] = useState([]);\r\n\r\n    \r\n\r\n    const { data:images, loading } = useFetchGif(category);\r\n\r\n    return (\r\n        <>\r\n        <h3>{category}</h3>\r\n        { loading && <p>Loading...</p>}\r\n        \r\n        <div className='card-grid'>\r\n            {\r\n                images.map(img=>{\r\n                    return <GifGridItem \r\n                                key= {img.id}\r\n                                {...img}\r\n                            />\r\n                })\r\n            }\r\n        </div>\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import React, {useState} from 'react'\r\nimport AddCategory from './AddCategory'\r\nimport GifGrid from './GifGrid';\r\n\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One']);\r\n    \r\n    return ( \r\n        <>\r\n            <h2> Gif Expert App</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr></hr> \r\n            <ol>\r\n                {\r\n                    categories.map(category=>(\r\n                        <GifGrid \r\n                            key={category}\r\n                            category={category}\r\n\r\n                        />\r\n                    ))\r\n                      \r\n                }\r\n            </ol>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/GifExpertApp';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}